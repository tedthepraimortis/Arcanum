class HasteSpell : ArcanumSpell
{
	override int GetIndex() { return 30; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeAlteration'; }
	override string GetName() { return loc("$ALTERATION_HASTE_NAME"); }
	override int GetSpellType() { return SType_SelfOrMass; }
	override int GetManaCost() { return 100; }
	override string GetDescription() { return String.Format(loc("$ALTERATION_HASTE_DESC"), 75 + int(50 * GetExperienceFactor()), (2500 + 7500 * GetExperienceFactor()) / 1000.0); }
	override string GetTechnicalInfo() { return loc("$ALTERATION_HASTE_INFO"); }
	override int GetMaxExperience() { return 100; }
	override class<ArcanumSigil> GetSigil() { return 'HasteSigil'; }
	override void DrawHudStuff(HDStatusBar sb, HDPlayerPawn hpl, HDArcanumTome tome)
	{
		HasteEffect haste = null;
		if (tome.SpiedActor)
		{
			haste = HasteEffect(tome.SpiedActor.FindInventory('HasteEffect'));
		}
		else
		{
			haste = HasteEffect(hpl.FindInventory('HasteEffect'));
		}
		if (haste)
		{
			sb.DrawRect(-24, -20, 5, 4);
			sb.DrawRect(-32, -16, 13, 2);
			sb.DrawRect(-34, -14, 15, 2);
			sb.DrawRect(-36, -12, 17, 2);
			sb.DrawWepNum(int(haste.DistanceLeft), int(2500 + 7500 * GetExperienceFactor()), alwaysprecise: true);
		}
	}
}

class HasteSigil : ArcanumSigil
{
	override void ActivateSelfOrMass()
	{
		PlayCastSound(self, "Arcanum/Alteration/Haste");
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			let plr = players[i].mo;
			if (plr && Distance3D(plr) <= HDCONST_ONEMETRE * 20 && CheckSight(plr))
			{
				plr.A_GiveInventory("HasteEffect");
				let effect = HasteEffect(plr.FindInventory("HasteEffect"));
				effect.SpeedFactor = 0.75 + 0.50 * ExperienceFactor;
				effect.DistanceLeft = 2500 + 7500 * ExperienceFactor;
			}
		}
	}

	override void InitRuneSlots()
	{
		vector2 Size = (4, 6.666);
		double A = 18.3;
		double B = 12.94;
		double RSize = 1.25;
		CreateRuneSlot((0, A), Size, RSize);
		CreateRuneSlot((B, B), Size, RSize);
		CreateRuneSlot((A, 0), Size, RSize);
		CreateRuneSlot((B, -B), Size, RSize);
		CreateRuneSlot((0, -A), Size, RSize);
		CreateRuneSlot((-B, -B), Size, RSize);
		CreateRuneSlot((-A, 0), Size, RSize);
		CreateRuneSlot((-B, B), Size, RSize);
	}

	Default
	{
		Height 44;
		Radius 50;
		StencilColor "FFFF11";
	}

	States
	{
		Spawn:
			CRAL D 0;
			Goto Super::Spawn;
	}
}

class HasteEffect : PowerSpeed
{
	override void DoEffect()
	{
		DistanceLeft -= owner.vel.xy.length() / HDCONST_ONEMETRE;
		if (DistanceLeft <= 0)
		{
			Destroy();
			return;
		}
		Speed = 1.0 + SpeedFactor;
		Super.DoEffect();
	}

	double SpeedFactor;
	double DistanceLeft;

	Default
	{
		+INVENTORY.PERSISTENTPOWER
		+INVENTORY.ALWAYSPICKUP
		Powerup.Duration 0xFFFFFF;
	}
}