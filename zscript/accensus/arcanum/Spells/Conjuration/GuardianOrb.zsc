class GuardianOrbSpell : ArcanumSpell
{
	override int GetIndex() { return 0; }
	override class<ArcanumSpellTree> GetTree() { return 'ArcanumTreeConjuration'; }
	override string GetName() { return loc("$CONJURATION_GUARDIANORB_NAME"); }
	override int GetSpellType() { return SType_SelfOrMass | SType_Targeted; }
	override int GetManaCost() { return 60; }
	override string GetDescription()
	{
		int count = int(1 + 2 * GetExperienceFactor());
		return String.Format(loc("$CONJURATION_GUARDIANORB_DESC"), count, count > 1 ? loc("$CONJURATION_GUARDIANORB_DESC2") : "");
	}
	override string GetTechnicalInfo() { return loc("$CONJURATION_GUARDIANORB_INFO"); }
	override int GetMaxExperience() { return 80; }
	override class<ArcanumSigil> GetSigil() { return 'GuardianOrbSigil'; }
}

class GuardianOrbSigil : ArcanumSigil
{
	override void ActivateTargeted()
	{
		let trgt = AimTarget();
		if (trgt && trgt.Health > 0 && (trgt.bISMONSTER || trgt.player) && Distance3D(trgt) <= HDCONST_ONEMETRE * 2)
		{
			CreatOrb(trgt);
		}
	}

	override void ActivateSelfOrMass()
	{
		if (master)
		{
			CreatOrb(master);
		}
	}

	private void CreatOrb(Actor other)
	{
		let manager = GuardianOrbManager.Get(other);
		if (manager.Orbs.Size() < int(1 + 5 * ExperienceFactor))
		{
			PlayCastSound(self, "Arcanum/Conjuration/GuardianOrb/Cast");
			manager.CreateOrb(other);
		}
	}

	override void InitRuneSlots()
	{
		CreateRuneSlot((0, 0), (6, 10), 1.9);
		CreateRuneSlot((18.6, 10.45), (3, 5), 0.75);
		CreateRuneSlot((-0.4, -21.3), (3, 5), 0.75);
		CreateRuneSlot((-18.2, 11.1), (3, 5), 0.75);
	}

	Default
	{
		StencilColor "DD1010";
	}

	States
	{
		Spawn:
			CRCN F 0;
			Goto Super::Spawn;
	}
}

class GuardianOrbManager : Thinker
{
	static GuardianOrbManager Get(Actor other)
	{
		ThinkerIterator it = ThinkerIterator.Create('GuardianOrbManager', STAT_DEFAULT);
		GuardianOrbManager t;
		while (t = GuardianOrbManager(it.Next()))
		{
			if (t.TrackedActor == other)
			{
				return t;
			}
		}

		t = new('GuardianOrbManager');
		t.TrackedActor = other;
		return t;
	}

	void CreateOrb(Actor other)
	{
		let orb = GuardianOrb(other.Spawn('GuardianOrb', other.pos));
		orb.master = other;
		orb.roll = random(0, 359);
		orb.scale = (0, 0);
		Orbs.Push(orb);
		Tick();
	}

	override void Tick()
	{
		Super.Tick();

		if (!TrackedActor)
		{
			Destroy();
			return;
		}
		for (int i = 0; i < Orbs.Size(); ++i)
		{
			if (!Orbs[i])
			{
				Orbs.Delete(i--);
				continue;
			}
			double angleOff = 360.0 / Orbs.Size();
			double curAngle = i * angleOff + Angle;
			Orbs[i].Warp(TrackedActor, TrackedActor.radius * 2, 0, 5 * sin(Orbs[i].GetAge() * 4), curAngle, WARPF_INTERPOLATE | WARPF_NOCHECKPOSITION | WARPF_ABSOLUTEANGLE, 1.1);
		}

		Angle += 2;
	}

	private Actor TrackedActor;
	private int Angle;

	Array<GuardianOrb> Orbs;
}

class GuardianOrb : Actor
{
	Default
	{
		Radius 2;
		Height 2;
		Scale 0.1;
		+NOINTERACTION
		+ROLLSPRITE
		+NOTIMEFREEZE
		+FORCEXYBILLBOARD
		+FRIENDLY
		+BRIGHT
		ReactionTime 800; // [Ace] 20 revenant tracers.
		MaxTargetRange HDCONST_ONEMETRE * 5;
	}

	private int ShootTicker;

	States
	{
		Spawn:
			GORB ABCDEFGHIJKLMNO 1 NoDelay
			{
				A_SetScale(scale.x + (1 / 15.0) * default.scale.x);
			}
		SpawnLoop:
			GORB ABCDEFGHIJKLMNO 1
			{
				if (!target)
				{
					BlockThingsIterator it = BlockThingsIterator.Create(self, MaxTargetRange);
					Actor closestActor;
					double closestDistance;
					while (it.Next())
					{
						double dist = Distance3D(it.thing);
						bool isValidProjectile = it.thing.bMISSILE && !it.thing.bFRIENDLY && it.thing.tracer == master;
						bool isValidMonster = it.thing.bFLOAT && it.thing.default.Health < 100 && !it.thing.bFRIENDLY;
						if (it.thing.bSHOOTABLE && (isValidProjectile || isValidMonster) && it.thing.Health > 0 && dist <= MaxTargetRange && CheckSight(it.thing))
						{
							if (closestDistance < dist)
							{
								closestDistance = dist;
								closestActor = it.thing;
							}
						}
					}
					if (closestActor)
					{
						target = closestActor;
						ShootTicker = 0;
					}
					return;
				}

				if (ShootTicker % 3 == 0)
				{
					A_StartSound("Arcanum/Conjuration/GuardianOrb/Fire", CHAN_BODY, CHANF_LOOPING);
					vector3 dir = Vec3To(target);
					dir.z += target.height / 2;
					dir = dir.unit();
					double dist = Distance3D(target);
					for (int i = 0; i < dist; i += 2)
					{
						A_SpawnParticle(0xFF1111, SPF_FULLBRIGHT, 3, 5, 0, dir.x * i, dir.y * i, dir.z * i);
					}
					for (int i = 0; i < 10; ++i)
					{
						target.A_SpawnParticle(0xFF1111, SPF_FULLBRIGHT | SPF_RELATIVE, random(10, 25), frandom(2, 3), frandom(0, 359), frandom(0, target.radius), 0, frandom(0, target.height), random(0, 3.0), 0, random(-1.0, 2.0), 0, 0, -1);
					}
					target.DamageMobj(self, self, 3, 'Electrical', DMG_THRUSTLESS);
					ReactionTime -= 3;
					A_SetScale(max(default.scale.x * 0.2, default.scale.x * (ReactionTime / double(default.ReactionTime))));
					if (ReactionTime <= 0)
					{
						A_StopSound(CHAN_BODY);
						A_StartSound("Arcanum/Conjuration/GuardianOrb/Die", CHAN_BODY);
						SetStateLabel('Death');
						return;
					}
				}
				ShootTicker++;
				if (!target || target.Health <= 0 || !CheckSight(target) || !target.bSHOOTABLE)
				{
					A_StopSound(CHAN_BODY);
					target = null;
				}
			}
			Loop;
		Death:
			GORB ABCDEFGHIJKLMNO 1
			{
				A_SetScale(scale.x + 0.015);
				A_FadeOut(0.1);
			}
			Loop;
	}
}